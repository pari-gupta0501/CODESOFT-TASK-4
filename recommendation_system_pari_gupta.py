# -*- coding: utf-8 -*-
"""Recommendation_system_pari-gupta.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VFB-g_FolmeUmPlRzh8p9g6mX5cmKfbF

# **TASK-4**
### **RECOMMENDATION SYSTEM**

### ‚úÖ Project Plan

üîπ **Option A** : Content-Based Filtering
Recommends items similar to what the user liked in the past, based on features (e.g., genre, description, tags).

üîπ **Option B** : Collaborative Filtering
Recommends based on similar users‚Äô behaviors using rating matrices.

### **GENERAL SETUP**
### Step 1: Install Required Libraries
"""

pip install pandas scikit-learn

"""## **üé¨ MOVIE RECOMMENDATION SYSTEM**"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

#Sample movie dataset
movie_data = {
    'title': ['The Matrix', 'Inception', 'Interstellar', 'The Avengers', 'John Wick'],
    'genre': ['sci-fi action', 'sci-fi thriller', 'sci-fi space', 'action superhero', 'action crime']
}
movies = pd.DataFrame(movie_data)

# TF-IDF Vectorization
tfidf = TfidfVectorizer()
tfidf_matrix = tfidf.fit_transform(movies['genre'])

# Cosine Similarity
cosine_sim = cosine_similarity(tfidf_matrix)

def recommend_movies(title):
    idx = movies[movies['title'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:4]
    movie_indices = [i[0] for i in sim_scores]
    return movies['title'].iloc[movie_indices]

# Test
print("Recommended movies for 'Inception':")
print(recommend_movies('Inception'))

"""## **üìö BOOK RECOMMENDATION SYSTEM**"""

#Sample book dataset
book_data = {
    'title': ['The Alchemist', 'Harry Potter', 'The Hobbit', '1984', 'Pride and Prejudice'],
    'tags': ['philosophy adventure', 'magic fantasy school', 'fantasy adventure', 'dystopia politics', 'romance classic']
}
books = pd.DataFrame(book_data)

# TF-IDF & Similarity
tfidf = TfidfVectorizer()
tfidf_matrix = tfidf.fit_transform(books['tags'])
cosine_sim = cosine_similarity(tfidf_matrix)

def recommend_books(title):
    idx = books[books['title'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:4]
    book_indices = [i[0] for i in sim_scores]
    return books['title'].iloc[book_indices]

# Test
print("\nRecommended books for 'Harry Potter':")
print(recommend_books('Harry Potter'))

"""## **üõçÔ∏è PRODUCT RECOMMENDATION SYSTEM**"""

# Sample product dataset
product_data = {
    'product': ['Smartphone', 'Laptop', 'Tablet', 'Smartwatch', 'Bluetooth Speaker'],
    'features': ['android camera screen', 'performance processor RAM', 'portable touchscreen android', 'fitness notifications bluetooth', 'music sound portable']
}
products = pd.DataFrame(product_data)

#TF-IDF & Similarity
tfidf = TfidfVectorizer()
tfidf_matrix = tfidf.fit_transform(products['features'])
cosine_sim = cosine_similarity(tfidf_matrix)

def recommend_products(product_name):
    idx = products[products['product'] == product_name].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:4]
    product_indices = [i[0] for i in sim_scores]
    return products['product'].iloc[product_indices]

# Test
print("\nRecommended products for 'Laptop':")
print(recommend_products('Laptop'))

